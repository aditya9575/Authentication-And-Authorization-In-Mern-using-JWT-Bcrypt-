
The Process Involves -> creating schema , then using that schema and making exported controller functions on that schema using the mongoose methods and bcryptjs to hash password and returning our JWT after successful login 
and then having our router setup in the index.js and the routing process there triggering the controller functions from index.js 

**user model file**

const mongoose = require("mongoose");

const userSchema = new mongoose.Schema({
    name: {
        type: String,
        required: true,
    },
    email: {
        type: String,
        required: true,
        unique: true,
    },
    password: {
        type: String,
        required: true,
    },
    role: {
        type: String,
        enum: ["user", "admin"],
        default: "user",
    },
});

module.exports = mongoose.model("User", userSchema);

**user controller file having the signup and login functions using jwt and bcrypt to hash password and also use jwt for authorization and authentication**
const User = require("../models/UserModel");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");

const JWT_SECRET = process.env.JWT_SECRET || "your-secret";

// === Register ===
exports.register = async (req, res) => {
    const { name, email, password } = req.body;
    try {
        const existing = await User.findOne({ email });
        if (existing) return res.status(400).json({ error: "User already exists" });

        const hashedPassword = await bcrypt.hash(password, 10);
        const newUser = new User({ name, email, password: hashedPassword });
        await newUser.save();

        res.status(201).json({ message: "User registered" });
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
};

// === Login ===
exports.login = async (req, res) => {
    const { email, password } = req.body;
    try {
        const user = await User.findOne({ email });
        if (!user) return res.status(404).json({ error: "User not found" });

        const match = await bcrypt.compare(password, user.password);
        if (!match) return res.status(401).json({ error: "Invalid credentials" });

        const token = jwt.sign({ id: user._id, role: user.role }, JWT_SECRET, {
            expiresIn: "1d",
        });

        res.status(200).json({
            token,
            user: { id: user._id, name: user.name, role: user.role },
        });
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
};


**index.js file for server setup and routing**
const express = require("express");
const mongoose = require("mongoose");
const dotenv = require("dotenv");
const cors = require("cors");
const {
    register,
    login
} = require("./controllers/authController");

dotenv.config();
const app = express();
app.use(express.json());
app.use(cors());

const MONGO_URI =
    process.env.MONGO_URI ||
    "mongodb+srv://adityamehto19:RQtLAyPfEcqPTgPp@authentication-authoriz.1vyeknz.mongodb.net/?retryWrites=true&w=majority&appName=Authentication-Authorization-Mern-Practice";

mongoose
    .connect(MONGO_URI)
    .then(() => console.log("MongoDB connected"))
    .catch((err) => console.log(err));

// === Routes ===
app.post("/signup", register);
app.post("/login", login);



const PORT = process.env.PORT || 5000;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));




